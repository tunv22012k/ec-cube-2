<?php

namespace Plugin\ProductOptions\Repository;

use Doctrine\Persistence\ManagerRegistry as RegistryInterface;
use Eccube\Doctrine\Query\Queries;
use Eccube\Repository\AbstractRepository;
use Eccube\Repository\QueryKey;
use Plugin\ProductOptions\Entity\Options;

/**
 * OptionsRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OptionsRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    protected $queries;

    public const COLUMNS = [
        'id'            => 'd.id',
        'name'          => 'd.name',
        'fee'           => 'd.fee',
        'create_date'   => 'd.create_date',
    ];

    /**
     * OptionsRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry, Queries $queries)
    {
        parent::__construct($registry, Options::class);

        $this->queries = $queries;
    }

    /**
     * Get list data
     *
     * @param array|null $searchData
     *
     * @return array
     */
    public function getQueryBuilderBySearchDataForAdmin(array|null $searchData)
    {
        // get data options
        $qb = $this->createQueryBuilder('d');

        // check data
        if (!empty($searchData["id"])) {
            $name = $searchData["id"];
            $qb = $qb->where('d.name LIKE :name')
                        ->setParameter('name', '%' . $name . '%');

            // check id
            if (is_numeric($searchData["id"])) {
                $qb = $qb->orWhere('d.id = :id')
                    ->setParameter('id', $searchData["id"]);
            }
        }

        // sort data when click table
        if (isset($searchData['sortkey']) && !empty($searchData['sortkey'])) {
            $sortOrder = (isset($searchData['sorttype']) && $searchData['sorttype'] == 'a') ? 'ASC' : 'DESC';

            $qb->orderBy(self::COLUMNS[$searchData['sortkey']], $sortOrder);
            $qb->addOrderBy('d.update_date', 'DESC');
            $qb->addOrderBy('d.id', 'DESC');
        } else { // sort data default
            $qb->orderBy('d.update_date', 'DESC');
            $qb->addOrderBy('d.id', 'DESC');
        }

        return $this->queries->customize(QueryKey::CUSTOMER_SEARCH, $qb, $searchData);
    }

    /**
     * Get list data find one by
     *
     * @return array
     */
    public function getListDatafindOneBy($id)
    {
        $options = $this->findOneBy(
            [
                'id'      => $id,
            ]
        );

        return $options;
    }

    /**
     * Get list data find use_flg active
     *
     * @return array
     */
    public function getListDatafindUseFlgActive()
    {
        $options = $this->findBy(
            [
                'use_flg'      => true,
            ]
        );

        return $options;
    }
}
